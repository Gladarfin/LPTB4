// File: "LinqXml90"
using PT4;
using System;
using System.Collections.Generic;
using System.Linq;
using System.Text;
using System.IO;
using System.Xml.Linq;

namespace PT4Tasks
{
    public class MyTask : PT
    {
        // При решении задач группы LinqXml доступны следующие
        // дополнительные методы расширения, определенные в задачнике:
        //
        //   Show() и Show(cmt) - отладочная печать последовательности,
        //     cmt - строковый комментарий;
        //
        //   Show(e => r) и Show(cmt, e => r) - отладочная печать
        //     значений r, полученных из элементов e последовательности,
        //     cmt - строковый комментарий.

        //LinqXml90°. Дан XML-документ с информацией об оценках учащихся по различным предметам. 
        //Образец элемента первого уровня (смысл данных тот же, что и в LinqXml83; 
        //в качестве имен элементов первого уровня указываются фамилии с инициалами учащихся и номера классов; 
        //между фамилией и инициалами указывается символ подчеркивания, а между инициалами и номером класса — дефис):
           //<Степанова_Д.Б.-9 subject="Физика" mark="4" />
        //Преобразовать документ, сгруппировав данные по номерам классов, а для каждого класса — по учащимся.
        //Изменить элементы первого уровня следующим образом:
            //<class9>
            //  <Степанова_Д.Б.>
            //    <История count = "0" > 0 </ История >
            //    ...
            //    <Физика count = "3" > 3.3 </ Физика >
            //  </ Степанова_Д.Б.>
            //  ...
            //</class9>
        //Имя элемента первого уровня должно иметь префикс class, после которого указывается номер класса, 
        //имя элемента второго уровня совпадает с фамилией и инициалами учащегося, между которыми указывается 
        //символ подчеркивания.Имя элемента третьего уровня совпадает с названием предмета.Значение атрибута count 
        //равно количеству оценок по данному предмету, полученных данным учащимся.Значение элемента третьего уровня 
        //равно средней оценке по данному предмету для данного учащегося; средняя оценка вычисляется по следующей формуле:
        //10*«сумма оценок»/«количество оценок»*0.1 (символ «/» обозначает операцию целочисленного деления,
        //полученное значение должно содержать не более одного дробного знака, незначащие нули не отображаются). 
        //Для каждого учащегося должна быть выведена информация по каждому предмету, входящему в исходный XML-документ; 
        //если по некоторому предмету учащийся не имеет оценок, то значение соответствующего элемента третьего уровня и
        //значение его атрибута count должны быть равны 0. Элементы первого уровня должны быть отсортированы 
        //по возрастанию номеров классов, а их дочерние элементы — в алфавитном порядке фамилий учащихся.
        //Элементы третьего уровня, имеющие общего родителя, должны быть отсортированы в алфавитном порядке названий предметов.

        public static void Solve()
        {
            Task("LinqXml90");
            string fileName = GetString();
            var doc = XDocument.Load(fileName);
            var ns = doc.Root.Name.Namespace;
            var data = doc.Root.Elements().Select(el => { string[] s = el.Name.LocalName.Split('-');
                                                          return new { 
                                                                          name = s[0],
                                                                          cl = int.Parse(s[1]),
                                                                          subject = el.Attribute("subject").Value,
                                                                          mark = int.Parse(el.Attribute("mark").Value)
                                                                      }; 
                                                        })
                               //в задании написано сортировать по фамилии, но по факту надо сортировать по ФИО целиком
                               .OrderBy(c => c.cl).ThenBy(n => n.name); 
            var subjects = data.Select(el => el.subject).Distinct().OrderBy(e => e);

            doc.Root.ReplaceNodes(data.GroupBy(c => c.cl,
                                              (c, ee) => new XElement(ns + ("class" + c),
                                                   ee.GroupBy(n => n.name,
                                                             (n, ee2) => new XElement(ns + n,
                                                                   subjects.GroupJoin(ee2, e1 => e1, e2 => e2.subject,
                                                                                     (e1, ee3) => new XElement(ns + e1,
                                                                                         new XAttribute("count", ee3.Select(q => q.mark).Count()),
                                                                                         ee3.Select(m => m.mark).Count() == 0 ? 0 :
                                                                                         Math.Round(10 * ee3.Select(m => m.mark).Sum() / ee3.Select(m => m.mark).Count() * 0.1, 1))))))));
            doc.Save(fileName);

        }
    }
}
