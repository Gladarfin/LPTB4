// File: "LinqXml41"
using PT4;
using System;
using System.Collections.Generic;
using System.Linq;
using System.Text;
using System.IO;
using System.Xml.Linq;

namespace PT4Tasks
{
    public class MyTask : PT
    {
        // ѕри решении задач группы LinqXml доступны следующие
        // дополнительные методы расширени€, определенные в задачнике:
        //
        //   Show() и Show(cmt) - отладочна€ печать последовательности,
        //     cmt - строковый комментарий;
        //
        //   Show(e => r) и Show(cmt, e => r) - отладочна€ печать
        //     значений r, полученных из элементов e последовательности,
        //     cmt - строковый комментарий.

        //LinqXml41∞. ƒан XML-документ. Ћюбой его элемент содержит либо набор дочерних элементов, 
        //либо текстовое представление вещественного числа. ƒобавить к каждому элементу, 
        //содержащему дочерние элементы, атрибут sum, равный сумме чисел, указанных в дочерних элементах. 
        //—умма округл€етс€ до двух дробных знаков, незначащие нули не отображаютс€. 
        //≈сли ни один из дочерних элементов не содержит текстовое представление числа, то атрибут sum должен иметь значение 0.
        
        //”казание.ƒл€ преобразовани€ текстового представлени€ вещественного числа в само число 
        //достаточно выполнить приведение к типу double элемента XML, содержащего это текстовое представление.
        //ƒл€ указани€ числового значени€ атрибута sum достаточно передать в качестве второго параметра конструктора 
        //XAttribute вещественное число, округленное требуемым образом (с помощью функции Math.Round с двум€ параметрами). 
        public static void Solve()
        {
            Task("LinqXml41");
            string fileName = GetString();
            var doc = XDocument.Load(fileName);

            foreach (var e in doc.Descendants().Where(val => val.Descendants().Count() != 0))

            {
                e.Add(new XAttribute("sum", Math.Round(e.Elements()
                                                        .Where(s => s.Descendants().Count() == 0)
                                                        .Select(val => (double)val).Sum(), 2)));
            }
            doc.Save(fileName);
        }
    }
}
