using PT4;
using System;
using System.Collections.Generic;
using System.Globalization;
using System.Linq;
using System.Reflection;
using System.Runtime.InteropServices;
using System.Text;
using System.Xml.Schema;

namespace PT4Tasks
{
    public class MyTask : PT
    {
        // При решении задач группы LinqBegin доступны следующие
        // дополнительные методы, определенные в задачнике:
        //
        //   GetEnumerableInt() - ввод числовой последовательности;
        //
        //   GetEnumerableString() - ввод строковой последовательности;
        //
        //   Put() (метод расширения) - вывод последовательности;
        //
        //   Show() и Show(cmt) (методы расширения) - отладочная печать
        //     последовательности, cmt - строковый комментарий;
        //
        //   Show(e => r) и Show(cmt, e => r) (методы расширения) -
        //     отладочная печать значений r, полученных из элементов e
        //     последовательности, cmt - строковый комментарий.

        public static void Solve()
        {
            //LinqBegin47°. Даны последовательности положительных целых чисел A и B; все числа в каждой последовательности различны. 
            //Найти внутреннее объединение A и B(см.LinqBegin46), пары в котором должны удовлетворять следующему условию: последняя цифра первого 
            //элемента пары(из A) должна совпадать с первой цифрой второго элемента пары(из B). Представить найденное объединение в виде 
            //последовательности строк, содержащих первый и второй элементы пары, разделенные двоеточием, например, «49:921». 
            //Порядок следования пар должен определяться исходным порядком элементов последовательности A, 
            //а для равных первых элементов пар — лексикографическим порядком строковых представлений вторых элементов(по возрастанию). 

            Task("LinqBegin47");
            var a = GetEnumerableInt();
            var b = GetEnumerableInt().OrderBy(e => e.ToString());
            a.Join(b,
                   x => x % 10,
                   y => (int)char.GetNumericValue(y.ToString()[0]),
                   (x, y) => string.Format("{0}:{1}", x, y))
                   .Put();            
        }
    }

}
