using PT4;
using System;
using System.Collections.Generic;
using System.Linq;
using System.Text;
using System.IO;

namespace PT4Tasks
{
    public class MyTask: PT
    {
        // Для чтения набора строк из исходного текстового файла
        // в массив a типа string[] используйте оператор:
        //
        //   a = File.ReadAllLines(GetString(), Encoding.Default);
        //
        // Для записи последовательности s типа IEnumerable<string>
        // в результирующий текстовый файл используйте оператор:
        //
        //   File.WriteAllLines(GetString(), s.ToArray(), Encoding.Default);
        //
        // При решении задач группы LinqObj доступны следующие
        // дополнительные методы расширения, определенные в задачнике:
        //
        //   Show() и Show(cmt) - отладочная печать последовательности,
        //     cmt - строковый комментарий;
        //
        //   Show(e => r) и Show(cmt, e => r) - отладочная печать
        //     значений r, полученных из элементов e последовательности,
        //     cmt - строковый комментарий.

        public static void Solve()
        {
			//LinqObj7°. Дано целое число K — код одного из клиентов фитнес - центра.Исходная последовательность содержит сведения о клиентах этого фитнес - центра.Каждый элемент последовательности включает следующие целочисленные поля:
            //< Продолжительность занятий(в часах) > < Год > < Номер месяца > < Код клиента >
            //Для каждого года, в котором клиент с кодом K посещал центр, определить месяц, в котором продолжительность занятий данного клиента была наибольшей для данного года(если таких месяцев несколько, то выбирать месяц с наименьшим номером). Сведения о каждом годе выводить на новой строке в следующем порядке: год, номер месяца, продолжительность занятий в этом месяце. 
			//Упорядочивать сведения по убыванию номера года. Если данные о клиенте с кодом K отсутствуют, то записать в результирующий файл строку «Нет данных».        
            
			Task("LinqObj7");
            int k = GetInt();
            var d = File.ReadAllLines(GetString(), Encoding.Default)
                                                                    .Where(e => int.Parse(e.Split(' ')[3]) == k)            //оставляем только нужные данные
                                                                    .OrderByDescending(i => int.Parse(i.Split(' ')[1]))     //сортируем по году в убывающем порядке
                                                                    .ThenByDescending(i => int.Parse(i.Split(' ')[0]))      //потом сортируем по продолжительности занятий в убывающем порядке
                                                                    .ThenBy(i => int.Parse(i.Split(' ')[2]))                //сортируем по месяцу в возрастающем порядке
                                                                    .Select(s => new[] { s.Split(' ')[1],                   //создаем массив записей вида { год, месяц, продолжительность}
                                                                                         s.Split(' ')[2],                   
                                                                                         s.Split(' ')[0]})
                                                                    .GroupBy(year => year[0],                               //группируем по году
                                                                             y => y,
                                                                             (x, y) => y.First())                           //берем первую запись из каждого года
                                                                    .Select(x => x[0].ToString() + ' ' + x[1].ToString() + ' ' + x[2].ToString()) //возращаем данные в строку
                                                                    .DefaultIfEmpty("Нет данных");                          //если данных нет - по умолчанию
            File.WriteAllLines(GetString(), d, Encoding.Default);   //пишем в файл
        }
    }
}
