using PT4;
using System;
using System.Collections.Generic;
using System.Linq;
using System.Text;
using System.IO;

namespace PT4Tasks
{
    public class MyTask: PT
    {
        // Для чтения набора строк из исходного текстового файла
        // в массив a типа string[] используйте оператор:
        //
        //   a = File.ReadAllLines(GetString(), Encoding.Default);
        //
        // Для записи последовательности s типа IEnumerable<string>
        // в результирующий текстовый файл используйте оператор:
        //
        //   File.WriteAllLines(GetString(), s.ToArray(), Encoding.Default);
        //
        // При решении задач группы LinqObj доступны следующие
        // дополнительные методы расширения, определенные в задачнике:
        //
        //   Show() и Show(cmt) - отладочная печать последовательности,
        //     cmt - строковый комментарий;
        //
        //   Show(e => r) и Show(cmt, e => r) - отладочная печать
        //     значений r, полученных из элементов e последовательности,
        //     cmt - строковый комментарий.

        public static void Solve()
        {
            //LinqObj8°. Дано целое число K — код одного из клиентов фитнес - центра.
            //Исходная последовательность содержит сведения о клиентах этого фитнес - центра.
            //Каждый элемент последовательности включает следующие целочисленные поля:
            //< Продолжительность занятий(в часах) > < Код клиента > < Год > < Номер месяца >
            //Для каждого года, в котором клиент с кодом K посещал центр, определить месяц, в котором продолжительность занятий данного клиента
            //была наименьшей для данного года(если таких месяцев несколько, то выбирать первый из этих месяцев в исходном наборе;
            //месяцы с нулевой продолжительностью занятий не учитывать). Сведения о каждом годе выводить на новой строке в следующем порядке: 
            //наименьшая продолжительность занятий, год, номер месяца. Упорядочивать сведения по возрастанию продолжительности занятий, 
            //а при равной продолжительности — по возрастанию номера года. Если данные о клиенте с кодом K отсутствуют, 
            //то записать в результирующий файл строку «Нет данных».

            Task("LinqObj8");
            int k = GetInt();
            var f = File.ReadAllLines(GetString(), Encoding.Default)
                        .Where(s => int.Parse(s.Split(' ')[1]) == k && int.Parse(s.Split(' ')[0]) != 0) 
                        .Select(s => new[] { s.Split(' ')[2], 
                                             s.Split(' ')[3], 
                                             s.Split(' ')[0] })
                        .OrderBy(s => int.Parse(s[2]))
                        .GroupBy(year => year[0],
                                 y => y,
                                 (x,y) => y.First())
                        .Select(s => s[2].ToString()+' '+s[0].ToString()+' '+s[1].ToString())
                        .OrderBy(s => int.Parse(s.Split(' ')[0]))
                        .ThenBy(s => int.Parse(s.Split(' ')[1]))
                        .DefaultIfEmpty("Нет данных");
            File.WriteAllLines(GetString(), f, Encoding.Default);
        }
    }
}
